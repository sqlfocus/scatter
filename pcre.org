#+TITLE: PCRE简单实例
#+AUTHOR: sqlfocus

本文档摘录PCRE的使用方法, 以期增加知识储备库, 备忘                                 

* 参考网址                                                                             
    1) [[http://www.pcre.org/][官网]]
    2) http://blog.csdn.net/sulliy/article/details/6247155                         
    3) http://blog.chinaunix.net/uid-26575352-id-3517146.html                      
    4) nginx_mod_regex.brief
    5) 正则表达式格式略图《PCRE Regular Expression Cheatsheet.pdf》
    6) http://www.pcre.org/original/doc/html/
    7) [[http://www.pcre.org/original/doc/html/pcredemo.html][官方示例]]
    8) [[http://www.pcre.org/current/doc/html/pcre2demo.html][pcre2官方示例]]

* 实例
#+BEGIN_SRC

#include <stdio.h>  
#include <string.h>  
#include <pcre.h>  
#define OVECCOUNT 30    /* should be a multiple of 3 */  
#define EBUFLEN 128  
#define BUFLEN 1024  

/* gcc test.c -l pcre -static */
int main(int argc, char **argv)
{  
    pcre  *re;              /* 被编译好的正则表达式的pcre内部表示结构 */
    const char *error;
    int  erroffset;
    int  ovector[OVECCOUNT];
    int  rc, i;
    char  src[] = "111 <title>Hello World</title> 222"; //字符串  
    char  pattern[] = "<title>(.*)</(tit)le>";          //正则表达式  

    printf("String : %s\n", src);  
    printf("Pattern: \"%s\"\n", pattern);  
    /* 将(字符串格式的)正则表达式编译成内部表示 
     * 方便在匹配多个字符串时加速*/
    re = pcre_compile(
            pattern,    //pattern, 输入参数, 正则表达式  
            0,          //options, 输入参数, 指定编译时的选项  
            &error,     //errptr, 输出参数, 用来输出错误信息  
            &erroffset, //erroffset, 输出参数, pattern中出错位置的偏移量  
            NULL);      //tableptr, 输入参数, 用来指定字符表, 一般用NULL  
    if (re == NULL) { 
        /* 如果编译失败，返回错误信息 */
        printf("PCRE compilation failed at offset %d: %s\n", erroffset, error);  
        return 1;  
    }  

    /* 字符串匹配: 匹配成功返回非负数，没有匹配返回负数 */
    rc = pcre_exec(
            re,         /*code, 输入参数, 用pcre_compile编译好的正则表达结构
                            的指针 */ 
            NULL,       /*extra, 输入参数, 用来向pcre_exec传一些额外的数据信
                            息的结构的指针 */
            src,        //subject, 输入参数, 被用来匹配的字符串
            strlen(src),//length, 输入参数, 用来匹配的字符串的长度
            0,          /*startoffset, 输入参数, 用来指定subject从什么位置开
                            始被匹配(偏移量) */ 
            0,          //options, 输入参数, 用来指定匹配过程中的一些选项  
            ovector,    //ovector, 输出参数, 用来返回匹配位置偏移量的数组  
            OVECCOUNT); /*ovecsize, 输入参数, 用来返回匹配位置偏移量的数组的
                            最大大小 */
    if (rc < 0) {
        /* 如果没有匹配，返回错误信息 */
        if (rc == PCRE_ERROR_NOMATCH) printf("Sorry, no match ...\n");  
        else printf("Matching error %d\n", rc);  
        pcre_free(re);
        return 1;
    }  

    /* 输出匹配结果, 捕获分组 */
    printf("\nOK, has matched ...\n\n");
    for (i = 0; i < rc; i++) {
        /* 分别取出捕获分组, $0整个正则公式, $1第一个() */
        /* ovector返回的是匹配字符串的偏移, 包括起始偏移和结束偏移, 所以就有
           循环内部的2*i处理 */
        char *substring_start = src + ovector[2*i];  
        int substring_length = ovector[2*i+1] - ovector[2*i];  
        printf("$%2d: %.*s\n", i, substring_length, substring_start);  
    }

    /* 释放内存, 编译正则表达式re */
    pcre_free(re);

    return 0;
}

#+END_SRC

