#+TITLE: lua简介
#+AUTHOR: sqlfocus

本文档记录lua的学习流程，并摘录lua的基本语法，希望能成为后续温习lua脚本
语言的重要参考！

* lua简介
lua是一个小巧的脚本语言，其设计目的是为了嵌入应用程序中，从而为应用程序提供
灵活的扩展和定制功能。
  - Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译、运行
  - Lua没有提供强大的库，所以不适合作为开发独立应用程序
  - Lua有一个同时进行的JIT项目，提供在特定平台上的即时编译功能
  - Lua脚本可以很容易的被C/C++代码调用，也可以反过来调用C/C++的函数
  - Lua语言的各个版本是不相兼容的
  - 通过lua或luajit开启交互模式，通过os.exit()退出
  - UNIX及类unix系统，lua脚本开头可以使用 =#!/usr/bin/env lua=

** 特性
  - 变量名没有类型，值才有类型，变量名在运行时可与任何类型的值绑定
        : 变量名由任意字母、数字和下画线构成，不以数字开头
        : 应避免使用以下画线开头并跟一或多个大写字母的变量名，lua有特殊用途
  - 语言只提供唯一一种数据结构，称为表(table)
  - 函数是一等类型(和number等基础类型同级别),支持匿名函数和正则尾递归
  - 支持词法定界(lexical scoping)和闭包(closure)
  - 提供thread类型和结构化的协程(coroutine)机制
  - 运行期能编译字符串形式的程序文本并载入虚拟机执行
  - 通过元表(metatable)和元方法(metamethod)提供动态元机制(dynamic meta-mechanism)
        : 从而允许程序运行时根据需要改变或扩充语法设施的内定语义
  - 能方便地利用表和动态元机制实现基于原型(prototype-based)的面向对象模型
  - 从5.1版开始提供了完善的模块机制,从而更好地支持开发大型的应用程序

** luaJIT
Lua非常高效,它运行得比许多其它脚本(如Perl、Python、Ruby)都快,这点在第三方
的独立测评中得到了证实。

LuaJIT就是一个为了再榨出一些速度的尝试，它利用即时编译(Just-in Time)技术把
Lua代码编译成本地机器码后交由CPU直接执行。

LuaJIT是采用C和汇编语言编写的Lua解释器与即时编译器；被设计成全兼容标准的
Lua5.1语言，同时可选地支持Lua5.2和Lua5.3中的一些不破坏向后兼容性的有用特
性；LuaJIT支持比标准Lua	5.1语言更多的基本原语和特性,因此功能上也要更加强
大。

** 安装luaJIT
  #+BEGIN_EXAMPLE
  $ wget	http://luajit.org/download/LuaJIT-2.1.0-beta2.tar.gz
  $ tar	-xvf	LuaJIT-2.1.0-beta2.tar.gz
  $ cd	LuaJIT-2.1.0-beta2
  $ make
  $ make install PREFIX=/home/sqlfocus/Program/bin
  $ vim ~/.bashrc
       添加 export PATH=$PATH:/home/sqlfocus/Program/bin
  $ source ~/.bashrc

  $ luajit -v      显示版本号
  #+END_EXAMPLE


* lua语法
** lua的基础数据类型
  - nil     :: 无效值，变量赋值前的默认值；赋值给全局变量等于删除；
  - boolean :: true/false，lua中只有nil和false为假，其余为真(比如0)
  - number  :: 实数
  - string  :: 字符串，使用 '' / "" / [[]] 定义字符串
  - table   :: 表，实现为关联数组
  - function :: 函数
  - userdata :: 自定义类型，主要用于存储由应用程序或C语言创建的新类型
  - thread   :: 线程

** 特殊符号
  - ~=      :: 不等于
  - ..      :: 字符串拼接符
  - ...     :: 函数变长参数，访问变长实参仍需要利用此符号
  - _       :: 虚变量，dummy variable，占位符，用于丢弃不需要的变量
  - --      :: 行注释
  - --[=[   :: 块注释起，中间的等号个数代表注释内[[的嵌套层数
  - ]=]     :: 块注释结束，等号个数必须与开始处匹配
  - #       :: 放置在变量前，获取变量长度
  - {}      :: 构造lua的table数据结构
  - in      :: for循环的迭代器形式
  - local   :: 局部符号声明
  - repeat  :: 类似于do..while，不过结束条件为until为假时

** 知名函数
  - assert()     :: 检查第一个参数是否为true，true则简单返回第一个参数
  - dofile()     :: 从文件加载并运行lua代码块
  - error()      :: 显式的发送错误信息
  - getmetatable()   :: 获取此数据的元表
  - ipairs()     :: table的无状态迭代器工厂
  - loadfile()   :: 从文件加载代码块，只编译不运行
  - loadstring() :: 从字符串读取代码，只编译不运行
  - load()       :: 终极的加载函数，一般不使用
  - module()     :: 用于声明模块儿
  - pairs()      :: table的迭代器工厂
  - pcall()      :: 利用此函数包装后，可在lua代码中处理错误
  - rawget()     :: 获取变量值，绕过元表的__index方法
  - rawset()     :: 声明新变量，绕过元表的__newindex方法
  - setfenv()    :: 改变函数的环境
  - setmetatable()   :: 设置此数据的元表
  - unpack()     :: 解耦展开数组元素

** 知名table
  - coroutine    :: 协程的函数集合
      : .create()  创建新的协程
      : .status()  查询状态，suspended、running、dead、normal
      : .resume()  启动
      : .yield()   自身放弃执行，让出资源，挂起
  - _G           :: 包含所有的全局变量
      : 此表在lua中称为环境，environment

** 易混淆知识点
  - a[x]与a.x的区别
      : a.x等价于a["x"]
      : table的统一初始化风格{["x"]=1, [1]=2, ... ,}  <==> {x=1, 2}
  - a.x()与a:x()的区别
      : a:x(arg)等价于a.x(a, arg)
  - Lua数组
      : 通常以1做为索引的起始值
      : #arr表示数组长度
      : 数组可包含空隙，hole，即中间存在为nil的元素
      : 带空隙数组，#arr值不准确，应利用table.maxn(arr)获取最大正索引
  - 尽量使用局部变量
      : 避免污染全局变量空间
      : 访问速度更快
      : 作用域结束后，便于垃圾回收器回收
  - ~local foo = foo~ 的妙用
      : 利用局部变量保存全局变量的值，加速
      : 便于后续全局变量的恢复
  - 多重返回值
      : Lua允许函数返回多个结果，只需在return关键字后列出所有返回值
      : Lua会调整返回值数量以匹配不同情形，多则默默丢弃，少则补充nil
      : unpack()，接受数组作参数，返回数组的所有元素
  - 函数没有名？
      : 函数和其他所有值一样都是匿名的
      : 通常所说的函数名指持有某个函数的变量
      : function foo()  return 1; end   <==>  foo = function() return 1; end
  - 闭包，closure
      : 一个函数位于另一个函数内，内部函数可以访问外部函数的局部变量 ==> 词法域
      : 此概念属于函数式编程的范畴
      : 被访问的外部函数的变量，称为非局部变量，non-local variable
      : 其实这些变量对于内部函数，即非全局变量，也非局部变量
      : 可以利用闭包实现复杂的功能，如迭代器等
  - 如何定义递归的局部函数？
      : 错误的格式如下
      :    local fact = function(n)
      :        if n==0 then 
      :            return 1
      :        else 
      :            return n*fact(n-1)     --错误点：编译至此时，局部的fact
      :        end                        --尚未定义完毕，此处引用里全局的
      :    end                            --fact，而非函数自身
      : 正确的格式
      :    local function fact(n) ...
      :    或
      :    local fact
      :    fact = function(n) ...         --递归时使用局部变量，虽定义未完全
      :                                   --但执行时可保证正确的值
  - 错误的尾递归
      : lua支持尾调用消除，类似于goto，不保存尾调用的栈信息，速度快 + 省内存
      :
      : 正确的格式
      :    function f(x)  return g(x)  end
      :
      : 错误的格式
      :    function f(x)  g(x) end              默默丢弃返回值
      :    function f(x)  return g(x)+1 end     利用返回值作额外的计算
      :    function f(x)  return x or g(x) end  调整返回值并作额外计算
      :    function f(x)  return (g(x)) end     需调整返回值
  - Lua如何实现动态连接？
      : ANSI C不支持动态连接，Lua通常不包含无法通过ANSI C实现的机制
      : 动态连接机制是例外，因此为可移植性，Lua自身在不同平台提供了动态连接机制
      : 功能的实现集中在package.loadlib()函数，加载指定的库，并链接入Lua

** 高级特性之元表
通常，Lua中的每个值都有一套预定义的操作集合；不过，可以通过元表修改此值
的行为，使得其面对一个非预定义的操作时，执行一个指定的操作。在元表中自定
义的方法，称为元方法。
  - 从概念上看，元表类似于C++的操作符重载
  - table和userdata可以拥有独立的元表
  - 其他类型的值则共享其类型所属的单一元表
  - 通过setmetatable/getmetatable()函数来设置/获取元表
  - lua中只能设置table的元表，其他类型值的元表可通过C代码设置
  - 设置元表的__metatable字段后，其他用户再不能设置、查看集合的元表

*** table的预定义操作
在lua中可修改的预定义操作有：
  - __add/__sub/__mul/__div/__unum/__mod/__pow  :: 算术操作符
  - __concat        :: 连接操作符号 =..=
  - __eq/__lt/__le  :: 关系操作符
  - __tostring      :: obj.tostring()方法
  - __metatable     :: 禁用getmetatable()/setmetatable()函数
  - __index/__newindex                          :: table访问操作符

*** 示例
创建支持union的集合
  #+BEGIN_EXAMPLE
  Set = {}
  local mt = {}
  
  function Set.new(l)
      local set = {}
      setmetatable(set, mt)          --设置元表
      for _,v in pairs(l) do
          set[v] = true
      end
      return set
  end
 
  function Set.union(a, b)           --实现合并操作
      local res = Set.new()
      for k in pairs(a) do res[k] = true end
      for k in pairs(b) do res[k] = true end
      return resA
  end

  mt.__add = Set.union               --重载 + 操作符

  实验
  s1 = Set.new({10, 20, 30, 40})
  s2 = Set.new({30, 1})
  s3 = s1 + s2                       --s3结果为{1, 10, 20, 30, 40}
  #+END_EXAMPLE

** 高级特性之非全局环境
最知名的环境为全局环境，_G；缺点为它是全局的，任何对它的修改都可能影响程
序的所有部分。lua5对此进行了改进，允许每个函数拥有自己的环境；可通过函数
setfenv()实现。

  #+BEGIN_EXAMPLE
  a = 1
  setfenv(1, {g=_G})        --1代表当前函数环境
  g.print(g.a)              --1
  g.print(a)                --nil
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  使用继承组装新环境
  a = 1
  local newgt = {}          --创建新环境
  setmetatable(newgt, {__index=_G})
  setfenv(1, newgt)
  print(a)                  --1

  a = 10
  print(a)                  --10

  print(_G.a)               --1
  #+END_EXAMPLE
** 高级特性之模块儿
从用户的观点看，一个模块儿就是一个程序库，可以通过 *require* 函数用来加载模
块；加载后，就得到了一个table，就像C++的命名空间，包含了模块儿中导出的所有
东西，如函数和常量。
  - 标准库是预先加载的，不需要单独加载
  - require搜索路径存放在变量package.path中，以LUA_PATH初始化
  - 搜索路径每项利用 =;= 风格
  - 搜索时，require利用模块儿名替换搜索路径每项中的 =?=
  #+BEGIN_EXAMPLE
  require "mod"
  mod.func()
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  local m = require "mod"
  m.func()
  #+END_EXAMPLE

在Lua中创建一个模块最简单的方法是：创建一个table，并将所有需要导出的函
数放入其中，最后返回这个table就可以了。
  #+BEGIN_EXAMPLE
  local modname = ...              --读取require的参数，当作模块儿名
  local M = {}                     --定义内部局部模块儿表
  _G[modname] = M                  --设定导出的表名
  package.loaded[modname] = M      --相当于尾端的return M语句，因此可省略
                                     --结尾的return，所有的依赖关系都在开头
                                     --部分，更清晰

  function M.new(r, i) return {r=r, i=i} end
  function M.add(c1, c2) return M.new(c1.r + c2.r, c1.i + c2.i) end
  #+END_EXAMPLE

*** 完整示例
  #+BEGIN_EXAMPLE
  以下代码保存在my.lua中
  local	modname = ...
  local M = {}
  _G[modname] = M
  package.loaded[modname] = M
  
  local	function getname()
     return "Lucy"
  end
  
  function M.greeting()
     print("hello" .. getname())
  end
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  把以下代码保存在main.lua中，然后执行它，调用my.lua模块儿
  local	fp = require("my")
  fp.greeting()              -->output: hello Lucy
  #+END_EXAMPLE

*** 改进
前置例子的缺点是，当访问同一模块儿中的其他公共实体时，必须限定其名字；并
且，只要一个函数的状态从私有改为公有，或从公有改为私有，就必须修改调用；
另外，私有声明很容易遗漏local。

引入环境，让模块儿的主程序体拥有单独的环境，可解决以上问题。
  #+BEGIN_EXAMPLE
  local	modname = ...
  local M = {}
  _G[modname] = M
  package.loaded[modname] = M
  setmetatable(M, {__index=_G})     --通过元表引入原全局变量
  setfenv(1, M)                     --占用单独的环境
  
  local	function getname()
     return "Lucy"
  end
  
  function greeting()
     print("hello" .. getname())
  end
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  local	modname = ...
  local M = {}
  _G[modname] = M
  package.loaded[modname] = M

  local print = print               --仅引入本模块儿使用的变量
  setfenv(1, M)
  
  local	function getname()
     return "Lucy"
  end
  
  function greeting()
     print("hello" .. getname())
  end
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  lua5.1提供了新概念，module()函数
  
  module(..., package.seeall)       --和前置例子效果一致

  local	function getname()
     return "Lucy"
  end
  
  function greeting()
     print("hello" .. getname())
  end
  #+END_EXAMPLE

** 高级特性之面向对象
lua没有明确提供面向对象编程的方法，不过利用table可以仿真面向对象编程。
lua没有类的概念，每个对象只能自定义行为和形态；不过要在lua中模拟类也
并不困难，可以参考基于原型的语言，如javascript等；原型也是一种常规的
对象，当其他对象遇到一个未知操作时，会查找原型对象。

  #+BEGIN_EXAMPLE
  实现原型很简单，可以通过设置元表实现；a上没有的操作就会在b上查找，
  b可以称为a的类。

  setmetatable(a, {__index = b})
  #+END_EXAMPLE

*** 类继承
lua可以通过元表从其它对象获取方法，这种行为就是一种继承。

  #+BEGIN_EXAMPLE
  仿真父类对象
  Account ＝ {balance = 0}

  function Account:new(o)
      o = o or {}               --用户没有提供则创建
      setmetatable(o, self)     --设置o的元表为Account
      self.__index = self       --最终等价于setmetatable(o, {__index=Account})

      return o
  end

  function Account:deposit(v)
      self.balance = self.balance + v
  end

  function Account:withdraw(v)
      if v>self.balance then
          error("insufficient funds")
      end
      self.balance = self.balance - v
  end

  继承并重定义父类方法
  SpecialAccount = Account:new()
  
  function SpecialAccount:withdraw(v)
     if v-self.balance >= self:getLimit() then
         error("insufficient funds")
     end
     self.balance = self.balance - v
  end

  function SpecialAccount:getlimit()
      return self.limit or 0
  end

  继承对象的实例化
  s = SpecialAccount:new{limit=1000.00}
  
  执行
  s:deposit(100)
  #+END_EXAMPLE

*** 类封装、私密性
大多数人认为封装（私密性）是面向对象语言不可或缺的一部分；每个对象的状态都应
该由它自身掌握。lua在设计对象时，并没有提供封装机制；但它足够灵活，可以通过
其它方式实现访问控制。

基本思想是，通过两个table表示一个对象，一个用来保存对象的状态，另一个用来保
存对象的操作，即接口，对象本身是通过第二个表来访问的；为了实现访问控制，表示
状态的table不保存在其它的表中，而只是保存在方法的closure中。

  #+BEGIN_EXAMPLE
  构造对象的工厂
  function newAccount(initBalance)
      local self = {balance = initBalance}    --状态表，在方法的closure中
      
      local withdraw = function (v)
                           self.balance = self.balance -v
                       end
      local deposit  = function (v)
                           self.balance = self.balance + v
                       end
      return {                                --接口表
          withdraw = withdraw,
          deposit = deposit,
      }
  end
  #+END_EXAMPLE


* 知名库模块儿
  - debug库         :: 调试库
  - ffi库           :: 最重要的扩展库，允许从纯lua调用c函数
  - io库            :: 文件操作
  - math库          :: 数学库
  - os库            :: 系统库
  - string库        :: 包含强大的字符操作函数
  - table库         :: 包含表辅助函数


* 典型应用
** 利用具名实参读取文件数据
人们往往认为写数据比读数据简单很多，因为写一个文件时，对写的内容拥有完全的
控制权；但读一个文件，却无从得知会读到的内容。

我们可以借助table构造式来定义数据格式，只需要在写数据时作一点额外的工作，读
数据就会变得相当容易。这项技术就是把数据做为lua代码来输出，当运行这些代码时，
lua也就读取了数据。

#+BEGIN_EXAMPLE
原始数据
  "lisongqing"  32  1984
  "fanlin"      33  1983

现组织为文件data，格式如下：
  Entry{
      "lisonqging",
      32,
      1984,
  }
  Entry{
      "fanlin",
      33,
      1983,
  }

读取文件的lua代码
  local count = 0
  function Entry(_) count = count+1 end
  dofile("data")
  print("number of entries: " .. count)

注意：
  1. Entry{<code>}  <===>  Entry({<code>})
  2. 拓展本示例可以实现更加复杂的功能
#+END_EXAMPLE

#+BEGIN_EXAMPLE
采用具名参数的形式进一步改进data文件的格式，如下：
  Entry{
      name = "lisonqging",
      age = 32,
      year = 1984,
  }
  Entry{
      name = "fanlin",
      age = 33,
      year = 1983,
  }

改进的处理函数：
  local people = {}
  function Entry(arg) if arg.name then people[arg.name] = true end
  dofile("data")
  for name in pairs(people) do print(name) end

备注：
  1. 此格式下，关键字次序不再重要
  2. 每个信息块儿可以拥有不同的关键字
  3. 处理更加灵活
#+END_EXAMPLE

** 序列化
通常需要串行化一些数据，然后才能将其存储到一个文件中，或者通过网络发送
出去；串行化后的数据可以用lua代码表示，这样当运行这些代码时，存储的数据
就可以在读取程序中得到重构了。

比如全局变量，可以串行化为 =varname = <exp>= ，其中varname为变量名，
=<exp>= 为计算变量值的语句。

#+BEGIN_EXAMPLE
串行化无环table的代码如下：
  function serialize(o)
      if type(o) == "number" then
          io.write(o)                          --数字直接输出
      elseif type(o) == "string" then
          io.write(string.format("%q", o))     --%q选项可以用于转义
      elseif type(o) == "table" then
          io.write("{\n")                      --表输出
          for k,v in pairs(o) do
              io.write(" ", k, " = ")
              serialize(v)
              io.write(",\n")
          end
          io.write("}\n")
      else
          error("cannot serialize a " .. type(o))
      end
  end
#+END_EXAMPLE



* 与C交互的C API
无论lua程序处于应用程序代码和库代码中哪种情形，与C语言交互都是通过C API
完成的。C API是一组能使C和lua交互的函数，包括读写lua全局变量、调用lua函
数、运行lua代码、注册C函数以供lua调用等。

lua和c通信主要靠一个虚拟栈，可用于交互数据、暂存中间结果等。lua.h定义了
提供的基础函数，包括创建lua环境、调用lua函数、读写lua全局变量、以及注册
供lua调用的新函数等，它们基本都以lua_开头；luaxlib.h定义了辅助库提供的
函数，它们都以luaL_开头，本库是一个利用lua.h提供的API编写的高度抽象层，
lua所有的标准库都用到了此辅助库。

** 示例，C调用lua
  #+BEGIN_EXAMPLE
  保存在fact.lua文件，做为被调用的脚本
  function fact (n)
    if n==0 then
        return 1
    else
        return n*fact(n-1)
    end
  end
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  保存为fact.c，做为应用程序
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "lua.h"
  #include "lualib.h"
  #include "lauxlib.h"
  
  void error (lua_State *L, const char *fmt, ...)
  {
    va_list argp;
    
    va_start(argp, fmt);
    vfprintf(stderr, fmt, argp);
    va_end(argp);
  
    lua_close(L);
    exit(EXIT_FAILURE);
  }
  
  int fact(lua_State *L, int n)
  {
    int res;
  
    lua_getglobal(L, "fact");          /* 待调用lua函数压栈 */
    lua_pushnumber(L, n);              /* 第一个参数压栈 */
  
    if (lua_pcall(L, 1, 1, 0) != 0) {  /* 调用lua，1参数，1结果 */
        error(L, "error from func 'f': %s\n", lua_tostring(L, -1));
    }
  
    if (!lua_isnumber(L, -1)) {        /* 检查栈顶，返回值 */
        error(L, "func 'f' must return a number\n");
    }
  
    res = lua_tonumber(L, -1);
    lua_pop(L, 1);                     /* 弹出返回值，1代表弹出的元素个数 */
  
    return res;
  }
  
  /* 编译指令： gcc fact.c -I/home/sqlfocus/Program/include/luajit-2.1 
                           -L/home/sqlfocus/Program/lib -lluajit-5.1 
                           -o fact_exe
     执行指令： ./fact_exe 3 
  */
  int main(int argc, char **argv)
  {
    int res;
    int num;
    const char *fact_file = "fact.lua";
    lua_State *L = luaL_newstate();    /* 打开lua */
    
    luaL_openlibs(L);                  /* 打开标准库 */
    if (luaL_loadfile(L, fact_file) || lua_pcall(L, 0, 0, 0)) {
                                       /* 加载lua脚本 */
        error(L, "cannot load lua file, %s\n", fact_file);
    }
  
    num = argc > 1 ? atoi(argv[1]) : 4;
    res = fact(L, num);                /* 调用lua脚本 */
    printf("fact of %d is %d\n", num, res);
  
    lua_close(L);                      /* 关闭lua */
    return 0;
  }
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  编译执行
  $ gcc ...
  $ ./fact_exe 3
       --->  fact of 3 is 6
  #+END_EXAMPLE

** 示例，lua调用C
当lua调用C函数时，也使用一个与C语言调用lua时相同的栈；C函数从栈中获取
函数参数，并将结果压入栈中；为了在栈中将函数结果与其他值分开，C函数还
应该返回其压入栈中结果的数量。

栈不是全局性的结构，每个函数都有自己的局部私有栈；当lua调用一个C函数
时，第一个参数总是这个局部栈的索引1。

*** lua调用C库
#+BEGIN_EXAMPLE
保存在文件fact.lua中
  local M = require "mylib"          --将mylib.so库链接到lua，并寻找
                                     --luaopen_mylib()函数，注册此函数，
                                     --随后调用它，以打开模块儿

  local num = ... or 3               --获取命令行参数，默认值3
  num = tonumber(num)
  
  local i = 1
  while i<=num do
    print(M.fact(i))                 --调用C动态库方法
    i = i + 1
  end
  
保存到mylib.c中
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "lua.h"
  #include "lualib.h"
  #include "lauxlib.h"
  
  static int fact(lua_State *L)
  {
    int res = 1;
    int n = lua_tonumber(L, 1);       /* 获取传入的参数 */
    
    for (int i=1; i<=n; i++) {
        res *= i;
    }
  
    lua_pushnumber(L, res);           /* 回传结果 */
    
    return 1;
  }
  
  static const struct luaL_Reg mylib[] = {
    {"fact", fact},                   /* 定义输出的函数 */
    {NULL, NULL}
  };
  
  int luaopen_mylib (lua_State *L) {  /* 注册函数集到lua环境 */
    luaL_register(L, "mylib", mylib);
    return 1;
  }

编译.c为.so库
  $ gcc mylib.c -I/home/sqlfocus/Program/include/luajit-2.1 
                -fPIC --shared -o mylib.so

运行.lua脚本
  $ export LUA_CPATH=/home/sqlfocus/work/mylib.so
  $ luajit fact.lua 3
#+END_EXAMPLE

*** lua调用C主程序的函数
#+BEGIN_EXAMPLE
  保存到fact.lua脚本
  local M = require "mylib"      --引入mylib库

  function fact_lua(num)
    local i = 1
    while i<=num do
        print(M.fact(i))         --调用库函数
        i = i + 1
    end

    return 0
  end
  
  保存到fact.c文件，当作应用程序
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include "lua.h"
  #include "lualib.h"
  #include "lauxlib.h"

  void error (lua_State *L, const char *fmt, ...)
  {
    va_list argp;
    
    va_start(argp, fmt);
    vfprintf(stderr, fmt, argp);
    va_end(argp);
  
    lua_close(L);
    exit(EXIT_FAILURE);
  }

  static int fact(lua_State *L)
  {
    int res = 1;
    int n = lua_tonumber(L, 1);       /* 获取传入的参数 */
    
    for (int i=1; i<=n; i++) {
        res *= i;
    }

    lua_pushnumber(L, res);           /* 回传结果 */
    
    return 1;
  }

  static const struct luaL_Reg mylib[] = {
    {"fact", fact},
    {NULL, NULL}
  };
  int luaopen_mylib (lua_State *L) {
    luaL_register(L, "mylib", mylib);
    return 1;
  }

  int main(int argc, char **argv)
  {
    int num;
    int res;
    const char *fact_file = "fact.lua";
    lua_State *L = luaL_newstate();    /* 打开lua */
    
    luaL_openlibs(L);                  /* 打开标准库 */
    luaopen_mylib(L);                  /* 注册函数到lua环境 */
    
    if (luaL_loadfile(L, fact_file) || lua_pcall(L, 0, 0, 0)) {
                                       /* 加载lua脚本 */
        error(L, "cannot load lua file, %s\n", fact_file);
    }
  
    num = argc > 1 ? atoi(argv[1]) : 4;
    lua_getglobal(L, "fact_lua");      /* 待调用lua函数压栈 */
    lua_pushnumber(L, num);            /* 第一个参数压栈 */
  
    if (lua_pcall(L, 1, 1, 0) != 0) {  /* 调用lua，1参数，1结果 */
        error(L, "error from func 'f': %s\n", lua_tostring(L, -1));
    }
  
    if (!lua_isnumber(L, -1)) {        /* 检查栈顶，返回值 */
        error(L, "func 'f' must return a number\n");
    }
    res = lua_tonumber(L, -1);
    lua_pop(L, 1);                     /* 弹出返回值，1代表弹出的元素个数 */
    printf("fact_lua retval is %d\n", res);
  
    lua_close(L);                      /* 关闭lua */

    return 0;
  }

  编译C程序
  $ gcc fact.c -I/home/sqlfocus/Program/include/luajit-2.1 
               -L/home/sqlfocus/Program/lib -lluajit-5.1 -o fact
  
  运行
  $ export LD_LIBRARY_PATH=/home/sqlfocus/Program/lib
  $ ./fact
#+END_EXAMPLE


* C函数保存状态
通常，C函数需要保存一些非局部的数据，这些数据的生存时间会比C函数的执行
更久，在C语言中通常利用全局变量或静态变量来达成这个目的。但为lua编写库
函数时，这不是好办法：
   - 无法在C中保存普通的lua对象
   - 无法用于多个lua状态

对应Lua函数三个存放非局部变量的方法，C API也有三种方式：
   - 注册表      ===     全局变量
   - 环境        ===     函数环境
   - upvalue     ===     非局部变量

** 注册表
全局table，只能被C代码访问；可以用它保存模块儿间共享的数据。
  - 位于伪索引LUA_REGISTRYINDEX上
  - 是一个普通的lua table
  - 所有C模块儿共享它，因此key值需紧慎选择，以避免冲突
  - key可以使用静态变量的地址，链接器保证唯一
  
  #+BEGIN_EXAMPLE
  保存字符串
  lua_pushlightuserdata(L, (void*) &key);   /* 压入地址 */
  lua_pushstring(L, mystr);                 /* 压入值 */
  lua_settable(L, LUA_REGISTRYINDEX);       /* registry[&key] = mystr */
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  检索字符串
  lua_pushlightuserdata(L, (void*) &key);   /* 压入地址 */
  lua_gettable(L, LUA_REGISTRYINDEX);       /* 检索值 */
  mystr = lua_tostring(L, -1);              /* 转换成字符串 */
  #+END_EXAMPLE

** 环境
可用于保存某个模块儿的私有数据，可在模块儿内的函数间共享
  - 从lua5.1开始支持
  - 伪索引为LUA_ENVIRONINDEX
  - *推荐使用*

  #+BEGIN_EXAMPLE
  int luaopen_foo(lua_State *L)
  {
      lua_newtable(L);                         //创建模块儿环境
      lua_replace(L, LUA_ENVIRONINDEX);        //替换成新创建的环境

      luaL_register(L, <库名>, <函数列表>);    //注册函数，它们共享新环境
      ...
  }
  #+END_EXAMPLE

** upvalue
与特定函数关联的Lua值，类似于C语言中的静态变量机制。
   - 与单个函数关联
   - 每个函数可与任意数量的upvalue关联
   - 每个upvalue保存一个lua值
   - 这种关联称为C Closure

  #+BEGIN_EXAMPLE
  /* 前向声明 */
  static int counter(lua_State *L);
  
  /* 工厂函数 */
  int newCounter(lua_State *L)
  {
      lua_pushinteger(L, 0);                 //upvalue的初始值
      lua_pushcclosure(L, &counter, 1);      //每个counter关联一个upvalue

      return 1;
  }

  /* 定义 */
  static int counter(lua_State *L) {
      int val = lua_tointeger(L, lua_upvalueindex(1));  //获取upvalue
      lua_pushinteger(L, ++val);                        //更新并压栈
      lua_pushvalue(L, -1);                             //复制更新后的值并压栈
      lua_replace(L, lua_upvalueindex(1));              //更新upvalue，并pop
     
      return 1;
  }
  #+END_EXAMPLE


* 用户自定义数据类型
可以通过C语言的自定义类型，扩展lua；lua提供了userdata基本类型，以支持
自定义扩展。
  - userdata提供了一块原始的内存区域
  - lua中没有为userdata提供任何预定义操作
  - 通过元表的__gc方法，在内存回收过程中释放关键资源，比如IO fd等

** 示例
通过一个简单的示例，布尔数组，来了解userdata的使用。

  #+BEGIN_EXAMPLE
  #include <limits.h>

  #define BITS_PER_WORD  (CHAR_BIT * sizeof(unsigned int))
  #define I_WORD(i)  ((unsigned int)(i)/BITS_PER_WORD)
  #define I_BIT(i)  (1<<((unsigned int)(i)%BITS_PER_WORD))

  typedef struct NumArray {
      int size;
      unsigned int values[1];           /* 可变部分 */
  };
  #+END_EXAMPLE
  
  #+BEGIN_EXAMPLE
  /* 检查指定参数的元表类型是否匹配，匹配则返回参数的指针 */
  #define checkarray (L) \
       (NumArray *) luaL_checkudata(L, 1, "LuaBook.array")

  /* 新建布尔数组 */
  static int newarray(lua_State *L) {
      int i,n;
      size_t nbytes;
      NumArray *a;
   
      n = luaL_checkint(L, -1);                       /* 获取参数 */
      nbytes = sizeof(NumArray) + I_WORD(n-1) * sizeof(unsigned int);
      a = (NumArray *)lua_newuserdata(L, nbytes);     /* 创建userdata */

      a->size = n;
      for (int i=0; i<I_WORD(n-1); i++) {             /* 初始化 */
          a->values[i] = 0;
      }

      luaL_getmetatable(L, "LuaBook.array");          /* 为新建数组设置元表 */
      lua_setmetatable(L, -2);

      return 1;                                       /* 新的userdata已在栈上 */
  }
  
  /* 设置某个位置的BIT位 */
  static int setarray(lua_State *L) {
      NumArray *a = checkarray(L);                   /* 检测元表是否一致 */
      int index = luaL_checkint(L, 2) - 1;
      
      if (lua_toboolean(L, 3)) {
          a->value[I_WORD(index)] |= I_BIT(index);   /* 设置bit */
      } else {
          a->value[I_WORD(index)] &= ~I_BIT(index);  /* 重置bit */
      }

      return 0;
  }
  
  /* 注册C模块儿函数 */
  static const struct luaL_Reg arrayLib_f[] = {      /* 普通函数 */
      {"new", newarray},
      {NULL, NULL}
  };
  static const struct luaL_Reg arrayLib_m[] = {      /* 接口函数 */
      {"set", setarray},
      {"__newindex", setarray},                      /* 使对象具有数组访问格式 */
      {NULL, NULL}
  };
  int luaopen_array (lua_State *L) {
      luaL_newmetatable(L, "LuaBook.array");         /* 设置元表 */
      lua_pushvalue(L, -1);
      lua_setfield(L, -2, "__index");                /* 元表.__index = 元表 */

      luaL_register(L, "array", arrayLib_f);         /* 通用函数注册到array表 */
      luaL_register(L, NULL, arrayLib_m);            /* 接口直接注册到元表 */
      return 1;
  }
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  使用
  a = array.new(1000)
  a.set(a, 10, false)                                /* 接口注册到元表，使得 */
                                                     /* a具有面向对象的风格 */
  a[10] = false                                      /* 数组风格 */
  #+END_EXAMPLE                                      


* 参考
  - OpenResty最佳实践
  - lua程序设计
  - [[http://luajit.org][luaJIT官网]]
  - [[http://www.lua.org/][lua官网]]
  - [[https://www.lua.org/manual/5.1/][手册]]


